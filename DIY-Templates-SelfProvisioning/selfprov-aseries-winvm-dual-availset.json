{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "FrontEnd Role Acronym": {
      "type": "string",
      "defaultValue": "FRONTENDAPP",
      "maxLength": 7,
      "metadata": {
        "description": "Follow the Virtual Machine naming convention for Brookfield Servers in Azure - azure-location-domain-workload-number (example. AZUEBTDC01)."
      }
    },
    "FrontEnd VMs to Deploy": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    "Select FrontEnd VM Size": {
      "type": "string",
      "defaultValue": "Standard_A3",
      "allowedValues": [
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "Please select one of the available Virtual Machine sizes. Note that if you try and use another VM size your deployment will fail due to enforced Resource Policies."
      }
    },
    "FrontEnd Subnet": {
      "type": "string",
      "defaultValue": "Front_End_1",
      "allowedValues": [
        "Front_End_1",
        "Mid_Tier_1"
      ],
      "metadata": {
        "description": "Existing subnet - Front_End Subnet for DMZ/Public, Mid_Tier for Applications such as SQL, Back_End for private services such as Domain Controllers."
      }
    },
    "Backend Role Acronym": {
      "type": "string",
      "defaultValue": "BACKENDAPP",
      "maxLength": 7,
      "metadata": {
        "description": "Follow the Virtual Machine naming convention for Brookfield Servers in Azure - azure-location-domain-workload-number (example. AZUEBTDC01)."
      }
    },
    "Backend VMs to Deploy": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    "Select BandEnd VM Size": {
      "type": "string",
      "defaultValue": "Standard_A3",
      "allowedValues": [
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "Please select one of the available Virtual Machine sizes. Note that if you try and use another VM size your deployment will fail due to enforced Resource Policies."
      }
    },
    "BackEnd Subnet": {
      "type": "string",
      "defaultValue": "Mid_Tier_1",
      "allowedValues": [
        "Front_End_1",
        "Mid_Tier_1"
      ],
      "metadata": {
        "description": "Existing subnet - Front_End Subnet for DMZ/Public, Mid_Tier for Applications such as SQL, Back_End for private services such as Domain Controllers."
      }
    },
    "Select Windows OS": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-R2-Datacenter"
      ],
      "metadata": {
        "Description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter, Windows-Server-Technical-Preview."
      }
    },
    "Storage Account Type": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "Select Storage Account Type. If you do not know use the Default Standard_LRS."
      }
    },
    "VM Admin Username": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "description": "The name of the local administrator of the new VM. Exclusion list: 'admin','administrator"
      }
    },
    "VM Admin Password": {
      "type": "securestring",
      "minLength": 12,
      "metadata": {
        "description": "The password for the local administrator account of the new VM"
      }
    },
    "timestamp": {
      "type": "string",
      "metadata": {
        "description": "The current datetime, as a string, to force the request to go through ARM even if all fields are the same as last ARM deployment of this template; example in parameters file is in MM/dd/yyyy H:mm:ss tt format"
      }
    }
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('Storage Account Type')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmName'),'-NIC', padLeft(copyIndex(1),2,'0'))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmName",
        "count": "[parameters('FrontEnd VMs to Deploy')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetId')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmName2'),'-NIC', padLeft(copyIndex(1),2,'0'))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmName",
        "count": "[parameters('Backend VMs to Deploy')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetId2')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName2')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 5
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName'), padLeft(copyIndex(1),2,'0'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmName'),'-NIC', padLeft(copyIndex(1),2,'0'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "copy": {
        "name": "vmName",
        "count": "[parameters('FrontEnd VMs to Deploy')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('Select FrontEnd VM Size')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName'), padLeft(copyIndex(1),2,'0'))]",
          "adminUsername": "[parameters('VM Admin Username')]",
          "adminPassword": "[parameters('VM Admin Password')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('windowsOSVersion')]",
            "version": "latest"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName')), padLeft(copyIndex(1),2,'0')),'-datadisk01','.vhd')]"
              },
              "name": "[concat(variables('vmName'), padLeft(copyIndex(1),2,'0'), '-DATADISK01')]",
              "createOption": "Empty",
              "caching": "None",
              "diskSizeGB": "1023",
              "lun": 0
            },
            {
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName')), padLeft(copyIndex(1),2,'0')),'-datadisk02','.vhd')]"
              },
              "name": "[concat(variables('vmName'), padLeft(copyIndex(1),2,'0'), '-DATADISK02')]",
              "createOption": "Empty",
              "caching": "None",
              "diskSizeGB": "1023",
              "lun": 1
            }
          ],
          "osDisk": {
            "name": "[concat(variables('vmName'), padLeft(copyIndex(1),2,'0'), '-OSDISK')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName')), padLeft(copyIndex(1),2,'0')),'-osdisk','.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmName'),'-NIC', padLeft(copyIndex(1),2,'0')))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        }
      },
      "resources": [{
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), padLeft(copyIndex(1),2,'0'))]"
          ],
          "tags": {
            "displayName": "Microsoft.Insights.VMDiagnosticsSettings"
          },
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('vmName'), padLeft(copyIndex(1),2,'0')), variables('wadcfgxend')))]",
              "StorageAccount": "[variables('diagnosticsStorageAccountName')]"
            },
            "protectedSettings": {
              "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
              "storageAccountKey": "[listkeys(variables('accountid'), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'), padLeft(copyIndex(1),2,'0'))]"
          ],
          "tags": {
            "displayName": "Microsoft.Powershell.DSC"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "autoUpgradeMinorVersion": true,
            "protectedSettings": {
              "Items": {
                "registrationKeyPrivate": "leUFhGrJNitRXffUP7Gva73YtiVGE0XS2yofBYGZgwoOi88Fy5WIotwb0ZJAbxQXdzQm8q9y5bAg+hZDdMcWrQ=="
              }
            },
            "settings": {
              "ModulesUrl": "https://github.com/Azure/azure-quickstart-templates/raw/master/dsc-extension-azure-automation-pullserver/UpdateLCMforAAPull.zip",
              "SasToken": "",
              "ConfigurationFunction": "UpdateLCMforAAPull.ps1\\ConfigureLCMforAAPull",
              "Properties": [
                {
                  "Name": "RegistrationKey",
                  "Value": {
                    "UserName": "PLACEHOLDER_DONOTUSE",
                    "Password": "PrivateSettingsRef:registrationKeyPrivate"
                  },
                  "TypeName": "System.Management.Automation.PSCredential"
                },
                {
                  "Name": "RegistrationUrl",
                  "Value": "https://eus2-agentservice-prod-1.azure-automation.net/accounts/e72febb6-a9b7-447c-9c60-f70d1dd7c081",
                  "TypeName": "System.String"
                },
                {
                  "Name": "NodeConfigurationName",
                  "Value": "[variables('automationnodeConfigurationName')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "ConfigurationMode",
                  "Value": "[variables('automationconfigurationMode')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "ConfigurationModeFrequencyMins",
                  "Value": "[variables('automationconfigurationModeFrequencyMins')]",
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "RefreshFrequencyMins",
                  "Value": "[variables('automationrefreshFrequencyMins')]",
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "RebootNodeIfNeeded",
                  "Value": "[variables('automationrebootNodeIfNeeded')]",
                  "TypeName": "System.Boolean"
                },
                {
                  "Name": "ActionAfterReboot",
                  "Value": "[variables('automationactionAfterReboot')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "AllowModuleOverwrite",
                  "Value": "[variables('automationallowModuleOverwrite')]",
                  "TypeName": "System.Boolean"
                },
                {
                  "Name": "Timestamp",
                  "Value": "[parameters('timestamp')]",
                  "TypeName": "System.String"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmName2'), padLeft(copyIndex(1),2,'0'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmName2'),'-NIC', padLeft(copyIndex(1),2,'0'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName2'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "copy": {
        "name": "vmName",
        "count": "[parameters('Backend VMs to Deploy')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('Select BandEnd VM Size')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmName2'), padLeft(copyIndex(1),2,'0'))]",
          "adminUsername": "[parameters('VM Admin Username')]",
          "adminPassword": "[parameters('VM Admin Password')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('windowsOSVersion')]",
            "version": "latest"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName2')), padLeft(copyIndex(1),2,'0')),'-datadisk01','.vhd')]"
              },
              "name": "[concat(variables('vmName2'), padLeft(copyIndex(1),2,'0'), '-DATADISK01')]",
              "createOption": "Empty",
              "caching": "None",
              "diskSizeGB": "1023",
              "lun": 0
            },
            {
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName2')), padLeft(copyIndex(1),2,'0')),'-datadisk02','.vhd')]"
              },
              "name": "[concat(variables('vmName2'), padLeft(copyIndex(1),2,'0'), '-DATADISK02')]",
              "createOption": "Empty",
              "caching": "None",
              "diskSizeGB": "1023",
              "lun": 1
            }
          ],
          "osDisk": {
            "name": "[concat(variables('vmName2'), padLeft(copyIndex(1),2,'0'), '-OSDISK')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/',concat(toLower(variables('vmName2')), padLeft(copyIndex(1),2,'0')),'-osdisk','.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmName2'),'-NIC1', padLeft(copyIndex(1),2,'0')))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName2'))]"
        }
      },
      "resources": [
          {
          "name": "Microsoft.Insights.VMDiagnosticsSettings",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName2'), padLeft(copyIndex(1),2,'0'))]"
          ],
          "tags": {
            "displayName": "Microsoft.Insights.VMDiagnosticsSettings"
          },
          "properties": {
            "publisher": "Microsoft.Azure.Diagnostics",
            "type": "IaaSDiagnostics",
            "typeHandlerVersion": "1.5",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('wadmetricsresourceid'), concat(variables('vmName2'), padLeft(copyIndex(1),2,'0')), variables('wadcfgxend')))]",
              "StorageAccount": "[variables('diagnosticsStorageAccountName')]"
            },
            "protectedSettings": {
              "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
              "storageAccountKey": "[listkeys(variables('accountid'), '2015-06-15').key1]",
              "storageAccountEndPoint": "https://core.windows.net"
            }
          }
        },
        {
          "name": "Microsoft.Powershell.DSC",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmName2'), padLeft(copyIndex(1),2,'0'))]"
          ],
          "tags": {
            "displayName": "Microsoft.Powershell.DSC"
          },
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.8",
            "autoUpgradeMinorVersion": true,
            "protectedSettings": {
              "Items": {
                "registrationKeyPrivate": "leUFhGrJNitRXffUP7Gva73YtiVGE0XS2yofBYGZgwoOi88Fy5WIotwb0ZJAbxQXdzQm8q9y5bAg+hZDdMcWrQ=="
              }
            },
            "settings": {
              "ModulesUrl": "https://github.com/Azure/azure-quickstart-templates/raw/master/dsc-extension-azure-automation-pullserver/UpdateLCMforAAPull.zip",
              "SasToken": "",
              "ConfigurationFunction": "UpdateLCMforAAPull.ps1\\ConfigureLCMforAAPull",
              "Properties": [
                {
                  "Name": "RegistrationKey",
                  "Value": {
                    "UserName": "PLACEHOLDER_DONOTUSE",
                    "Password": "PrivateSettingsRef:registrationKeyPrivate"
                  },
                  "TypeName": "System.Management.Automation.PSCredential"
                },
                {
                  "Name": "RegistrationUrl",
                  "Value": "https://eus2-agentservice-prod-1.azure-automation.net/accounts/e72febb6-a9b7-447c-9c60-f70d1dd7c081",
                  "TypeName": "System.String"
                },
                {
                  "Name": "NodeConfigurationName",
                  "Value": "[variables('automationnodeConfigurationName')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "ConfigurationMode",
                  "Value": "[variables('automationconfigurationMode')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "ConfigurationModeFrequencyMins",
                  "Value": "[variables('automationconfigurationModeFrequencyMins')]",
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "RefreshFrequencyMins",
                  "Value": "[variables('automationrefreshFrequencyMins')]",
                  "TypeName": "System.Int32"
                },
                {
                  "Name": "RebootNodeIfNeeded",
                  "Value": "[variables('automationrebootNodeIfNeeded')]",
                  "TypeName": "System.Boolean"
                },
                {
                  "Name": "ActionAfterReboot",
                  "Value": "[variables('automationactionAfterReboot')]",
                  "TypeName": "System.String"
                },
                {
                  "Name": "AllowModuleOverwrite",
                  "Value": "[variables('automationallowModuleOverwrite')]",
                  "TypeName": "System.Boolean"
                },
                {
                  "Name": "Timestamp",
                  "Value": "[parameters('timestamp')]",
                  "TypeName": "System.String"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "variables": {
    "storageAccountName": "[toLower(concat(variables('vmName'),'stor'))]",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "windowsOSVersion": "[parameters('Select Windows OS')]",
    "apiVersion": "2015-06-15",
    "vmName": "[toUpper(concat('AZUEBT', parameters('FrontEnd Role Acronym')))]",
    "vmName2": "[toUpper(concat('AZUEBT', parameters('BackEnd Subnet')))]",
    "availabilitySetName": "[concat(variables('vmName'),'-AS')]",
    "availabilitySetName2": "[concat(variables('vmName2'),'-AS2')]",
    "vnetRG": "BCO_GRP_1",
    "existingVNETName": "US_EAST_Prod_1",
    "vnetID": "[resourceId(variables('vnetRG'), 'Microsoft.Network/virtualNetworks', variables('existingVNETName'))]",
    "subnetId": "[concat(variables('vnetID'),'/subnets/', parameters('FrontEnd Subnet'))]",
    "subnetId2": "[concat(variables('vnetID'),'/subnets/', parameters('BackEnd Subnet'))]",
    "diagnosticsStorageAccountName": "[toLower(concat(variables('vmName'),'stor'))]",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "accountid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('diagnosticsStorageAccountResourceGroup'), '/providers/', 'Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'), variables('wadperfcounters1'), variables('wadperfcounters2'), '<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name , '/providers/', 'Microsoft.Compute/virtualMachines/')]",
    "wadcfgxend": "\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>",
    "automationRegistrationURL": "https://eus2-agentservice-prod-1.azure-automation.net/accounts/e72febb6-a9b7-447c-9c60-f70d1dd7c081",
    "automationNodeConfigurationName": "BCODSCStandard.localhost",
    "automationconfigurationMode": "ApplyOnly",
    "automationconfigurationModeFrequencyMins": "60",
    "automationrefreshFrequencyMins": "30",
    "automationrebootNodeIfNeeded": true,
    "automationactionAfterReboot": "ContinueConfiguration",
    "automationallowModuleOverwrite": true
  }
}